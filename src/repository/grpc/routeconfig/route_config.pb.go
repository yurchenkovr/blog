// Code generated by protoc-gen-go. DO NOT EDIT.
// source: route_config.proto

/*
Package routeconfig is a generated protocol buffer package.

It is generated from these files:
	route_config.proto

It has these top-level messages:
	RequestName
	ServerConfig
*/
package routeconfig

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestName struct {
}

func (m *RequestName) Reset()                    { *m = RequestName{} }
func (m *RequestName) String() string            { return proto.CompactTextString(m) }
func (*RequestName) ProtoMessage()               {}
func (*RequestName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServerConfig struct {
	Config []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *ServerConfig) Reset()                    { *m = ServerConfig{} }
func (m *ServerConfig) String() string            { return proto.CompactTextString(m) }
func (*ServerConfig) ProtoMessage()               {}
func (*ServerConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServerConfig) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestName)(nil), "routeconfig.RequestName")
	proto.RegisterType((*ServerConfig)(nil), "routeconfig.ServerConfig")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RouteConfig service

type RouteConfigClient interface {
	GetServerConfig(ctx context.Context, in *RequestName, opts ...grpc.CallOption) (*ServerConfig, error)
}

type routeConfigClient struct {
	cc *grpc.ClientConn
}

func NewRouteConfigClient(cc *grpc.ClientConn) RouteConfigClient {
	return &routeConfigClient{cc}
}

func (c *routeConfigClient) GetServerConfig(ctx context.Context, in *RequestName, opts ...grpc.CallOption) (*ServerConfig, error) {
	out := new(ServerConfig)
	err := grpc.Invoke(ctx, "/routeconfig.RouteConfig/GetServerConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouteConfig service

type RouteConfigServer interface {
	GetServerConfig(context.Context, *RequestName) (*ServerConfig, error)
}

func RegisterRouteConfigServer(s *grpc.Server, srv RouteConfigServer) {
	s.RegisterService(&_RouteConfig_serviceDesc, srv)
}

func _RouteConfig_GetServerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteConfigServer).GetServerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routeconfig.RouteConfig/GetServerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteConfigServer).GetServerConfig(ctx, req.(*RequestName))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "routeconfig.RouteConfig",
	HandlerType: (*RouteConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerConfig",
			Handler:    _RouteConfig_GetServerConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "route_config.proto",
}

func init() { proto.RegisterFile("route_config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0xca, 0x2f, 0x2d,
	0x49, 0x8d, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2,
	0x06, 0x8b, 0x41, 0x84, 0x94, 0x78, 0xb9, 0xb8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xfc,
	0x12, 0x73, 0x53, 0x95, 0xd4, 0xb8, 0x78, 0x82, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0x9c, 0xc1, 0xd2,
	0x42, 0x62, 0x5c, 0x6c, 0x10, 0x85, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x50, 0x9e, 0x51,
	0x38, 0x17, 0x77, 0x10, 0xc8, 0x14, 0xa8, 0x32, 0x0f, 0x2e, 0x7e, 0xf7, 0xd4, 0x12, 0x14, 0x9d,
	0x12, 0x7a, 0x48, 0xd6, 0xe8, 0x21, 0xd9, 0x21, 0x25, 0x89, 0x22, 0x83, 0xac, 0x49, 0x89, 0x21,
	0x89, 0x0d, 0xec, 0x46, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xef, 0x3d, 0x79, 0xb9,
	0x00, 0x00, 0x00,
}
